{{#if template}}
<template>
  <page-header-wrapper :title="false" content="列表模板">
    <a-card :bordered="false">
      <div class="table-page-search-wrapper">
        <a-form layout="inline">
          <a-row :gutter="48">
            <a-col :md="8" :sm="24">
              <a-form-item label="名称">
                <a-input v-model="queryParam.name" placeholder="名称"/>
              </a-form-item>
            </a-col>
            <a-col :md="8" :sm="24">
              <a-form-item label="编码">
                <a-input v-model="queryParam.code" placeholder="编码"/>
              </a-form-item>
            </a-col>
            <template v-if="advanced">
              <a-col :md="8" :sm="24">
                <a-form-item label="状态">
                  <a-select v-model="queryParam.status" placeholder="请选择">
                    <a-select-option value="">全部</a-select-option>
                    <a-select-option :value="1">有效</a-select-option>
                    <a-select-option :value="0">无效</a-select-option>
                  </a-select>
                </a-form-item>
              </a-col>
            </template>
            <a-col :md="!advanced && 8 || 24" :sm="24">
            <span class="table-page-search-submitButtons" :style="advanced && { float: 'right', overflow: 'hidden' } || {} ">
              <a-button type="primary" @click="$refs.table.refresh(true)">查询</a-button>
              <a-button style="margin-left: 8px" @click="() => queryParam = {status: ''}">重置</a-button>
              <a style="margin-left: 8px" @click="toggleAdvanced">
                \{{ advanced ? '收起' : '展开' }}
                <a-icon :type="advanced ? 'up' : 'down'"/>
              </a>
            </span>
            </a-col>
          </a-row>
        </a-form>
      </div>

      <div class="table-operator">
        <a-button type="primary" icon="plus" @click="handleAdd">新增</a-button>
      </div>

      <s-table
        ref="table"
        size="default"
        :columns="columns"
        :rowKey="(record) => record.id"
        :data="loadData"
        :loading="loading"
        :showPagination="true"
      >
        <template slot="index" slot-scope="text, record, index">
          \{{ index + 1 }}
        </template>
        <template slot="status" slot-scope="text, record">
          <a-tag v-if="text === 1" color="blue">启用</a-tag>
          <a-tag v-else-if="text === 0" color="red">禁用</a-tag>
        </template>
        <template slot="action" slot-scope="text, record">
          <a-button type="primary" size="small" @click="handleEdit(record)">编辑</a-button>
          <a-divider type="vertical" />
          <a-dropdown>
            <a class="ant-dropdown-link">
              更多 <a-icon type="down" />
            </a>
            <a-menu slot="overlay">
              <a-menu-item>
                <a-button type="dashed" size="small" @click="handleItem(record)">子项</a-button>
              </a-menu-item>
              <a-menu-item>
                <a-button v-if="record.status === 0" type="dashed" size="small" @click="updateStatus(record)">启用</a-button>
                <a-button v-else-if="record.status === 1" type="dashed" size="small" @click="updateStatus(record)">禁用</a-button>
              </a-menu-item>
              <a-menu-item>
                <a-popconfirm title="确定删除？" okText="确定" cancelText="取消" @confirm="handleDelete(record)">
                  <a-button type="danger" size="small">删除</a-button>
                </a-popconfirm>
              </a-menu-item>
            </a-menu>
          </a-dropdown>
        </template>
      </s-table>

      <!--编辑对话框-->
      <a-modal
        v-model="visible"
        :title="modalTitle"
        okText="确定"
        cancelText="取消"
        :width="800"
        :destroyOnClose="false"
        :maskClosable="false"
        :confirmLoading="confirmLoading"
        @ok="handleOk"
        @cancel="visible = false"
      >
        <a-form
          :form="form"
        >
          <a-form-item
            :labelCol="labelCol"
            :wrapperCol="wrapperCol"
            label="名称"
          >
            <a-input
              v-decorator="['name', { rules: [{ required: true, message: '名称不能为空' }] }]"
              placeholder="请输入名称"
            />
          </a-form-item>
          <a-form-item
            :labelCol="labelCol"
            :wrapperCol="wrapperCol"
            label="编码"
          >
            <a-input
              v-decorator="['code', { rules: [{ required: true, message: '编码不能为空' }] }]"
              placeholder="请输入编码"
            />
          </a-form-item>
          <a-form-item
            :labelCol="labelCol"
            :wrapperCol="wrapperCol"
            label="状态"
          >
            <a-select
              v-decorator="[
              'status',
              { initialValue: 1, rules: [{ required: true, message: '状态不能为空' }] }
            ]"
            >
              <a-select-option :value="1">正常</a-select-option>
              <a-select-option :value="0">禁用</a-select-option>
            </a-select>
          </a-form-item>
        </a-form>
      </a-modal>
    </a-card>
  </page-header-wrapper>
</template>
{{/if}}

{{#if script}}
<script>
  import { STable } from '@/components'
  // todo 需要删除
  // eslint-disable-next-line no-unused-vars
  import { listByPage, deleteById, add, update } from '@/api/{{ name }}'
  export default {
  name: '{{ name }}',
  components: {
    STable
  },
  props: {},
  data () {
    return {
      loading: false,
      visible: false,
      confirmLoading: false,
      modalTitle: '',
      labelCol: {
        xs: { span: 24 },
        sm: { span: 5 }
      },
      wrapperCol: {
        xs: { span: 24 },
        sm: { span: 16 }
      },
      form: this.$form.createForm(this),
      // 高级搜索 展开/关闭
      advanced: false,
      // 查询参数
      queryParam: {
        name: '',
        code: '',
        status: ''
      },
      // 表头
      columns: [
        {
          title: '序号',
          dataIndex: 'id',
          align: 'center',
          scopedSlots: { customRender: 'index' }
        },
        {
          title: '名称',
          dataIndex: 'name',
          align: 'center',
          sorter: true,
          ellipsis: true
        },
        {
          title: '编码',
          dataIndex: 'code',
          align: 'center',
          sorter: true,
          ellipsis: true
        },
        {
          title: '状态',
          dataIndex: 'status',
          align: 'center',
          sorter: true,
          scopedSlots: { customRender: 'status' }
        },
        {
          title: '创建时间',
          dataIndex: 'createTime',
          align: 'center'
        },
        {
          title: '修改时间',
          dataIndex: 'updateTime',
          align: 'center'
        },
        {
          title: '操作',
          width: '150px',
          dataIndex: 'action',
          scopedSlots: { customRender: 'action' }
        }
      ],
      defaultRecord: {
        status: 1
      },
      currentRecord: {},
      editMode: false
    }
  },
  created () {},
  mounted () {},
  methods: {
    toggleAdvanced () {
      this.advanced = !this.advanced
    },
    // 加载数据方法 必须为 Promise 对象
    loadData (params) {
      this.loading = true
      if (params.sortOrder === 'ascend') {
        params.sortOrder = 'asc'
      }
      if (params.sortOrder === 'descend') {
        params.sortOrder = 'desc'
      }
      if (params.sortField === 'createTime') {
        params.sortField = 'create_time'
      }
      params.pageNum = params.pageNo
      delete params.pageNo
      // 自己实现分页查询
      /* return getListByPage(Object.assign({}, this.queryParam), params).then(res => {
        const { status, data, message } = res
        if (status === 1) {
          return data
        } else {
          this.$message.error(res.message)
        }
        this.loading = false
      }).catch(err => {
        this.loading = false
        console.error(err)
        this.$message.error(err.message || '请求数据错误')
      }) */
    },
    updateStatus (record) {
      const params = { id: record.id }
      // todo 需要删除
      // eslint-disable-next-line no-unused-vars
      let defaultMessage = '修改状态成功'
      if (record.status === 1) {
        params.status = 0
        defaultMessage = '禁用成功'
      } else {
        params.status = 1
        defaultMessage = '启用成功'
      }
      // 自己实现状态修改
      /* updateDictStatus(params).then(res => {
        const { status, data, message } = res
        if (status === 1) {
          this.$message.success(defaultMessage)
          this.refreshTable()
        } else {
          this.$message.error(message)
        }
      }).catch(err => {
        console.error(err)
      }) */
    },
    handleDelete (record) {
      if (record.id) {
        // 自己实现删除
        /* deleteById(record.id).then(res => {
          const { status, data, message } = res
          if (status === 1) {
            this.$message.success('删除成功')
            this.refreshTable()
          } else {
            this.$message.error(message)
          }
        }).catch(err => {
          console.error(err)
        }) */
      } else {
        this.$message.error('id为空')
      }
    },
    handleEdit (record) {
      this.modalTitle = '编辑'
      this.visible = true
      this.editMode = true
      this.currentRecord = record
      this.$nextTick(() => {
        this.form.resetFields()
        const values = this.form.getFieldsValue()
        Object.keys(values).forEach(key => {
          values[key] = record[key]
        })
        this.form.setFieldsValue(values)
      })
    },
    handleAdd () {
      this.modalTitle = '新增'
      this.visible = true
      this.editMode = false
      this.currentRecord = {}
      this.$nextTick(() => {
        // 清空 form 值，防止在弹框 destroyOnClose="false" 的配置下显示之前的内容
        this.form.resetFields()
        this.form.setFieldsValue(this.defaultRecord)
      })
    },
    handleOk (e) {
      this.confirmLoading = true
      this.form.validateFields((err, values) => {
        if (!err) {
          // 修改
          if (this.currentRecord.id) {
            values.id = this.currentRecord.id
            // 自己实现更新
            /* update(values).then(res => {
              const { status, data, message } = res
              this.confirmLoading = false
              if (status === 1) {
                this.$message.success('修改成功')
                this.visible = false
                this.refreshTable()
              } else {
                this.$message.error(message)
              }
            }).catch(err => {
              this.confirmLoading = false
              console.log(err)
            }) */
          } else {
            // 自己实现新增
            /* add(values).then(res => {
              this.confirmLoading = false
              const { status, data, message } = res
              if (status === 1) {
                this.$message.success('新增成功')
                this.visible = false
                this.refreshTable()
              } else {
                this.$message.error(message)
              }
            }).catch(err => {
              this.confirmLoading = false
              console.error(err)
            }) */
          }
        } else {
          this.$message.warn('数据填写有误')
          this.confirmLoading = false
        }
      })
    },
    handleItem (record) {
      this.$router.push({ path: '/item/list', query: { id: record.id } })
    },
    refreshTable () {
      // 新增/修改 成功时，重载列表
      this.$refs.table.refresh()
    }
  }
}
</script>
{{/if}}

{{#if style}}
<style lang="scss" scoped>
</style>
{{/if}}